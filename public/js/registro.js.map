{"version":3,"sources":["CPF.js"],"names":[],"mappingsfile":"registro.js","sourcesContent":["/*!\n*   Gerador e Validador de CPF v3.1.1\n*   https://github.com/tiagoporto/gerador-validador-cpf\n*   Copyright (c) 2014-2016 Tiago Porto (http://www.tiagoporto.com)\n*   Released under the MIT license\n*/\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * CPF Class\n *\n * generate function\n * @param  {string} param      Formatting option\n * @return {string}            Valid and formatted CPF\n *\n * validate function\n * @param  {string} value      The value for validation\n * @return {boolean}           True = valid || False = invalid\n *\n * format function\n * @param  {string} value      The value for formatting\n * @param  {string} param      Formatting option\n *\n * @return {string}            Formatted CPF || error message\n */\n\n/*eslint-env node*/\n(function () {\n    'use strict';\n\n    var root = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.self === self && self || (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global.global === global && global || this;\n\n    var CPF = function CPF() {};\n\n    if (typeof exports !== 'undefined' && !exports.nodeType) {\n        if (typeof module !== 'undefined' && !module.nodeType && module.exports) {\n            exports = module.exports = CPF;\n        }\n        exports.CPF = CPF;\n    } else {\n        root.CPF = CPF;\n    }\n\n    function calcChecker1(firstNineDigits) {\n        var sum = null;\n\n        for (var j = 0; j < 9; ++j) {\n            sum += firstNineDigits.toString().charAt(j) * (10 - j);\n        }\n\n        var lastSumChecker1 = sum % 11;\n        var checker1 = lastSumChecker1 < 2 ? 0 : 11 - lastSumChecker1;\n\n        return checker1;\n    }\n\n    function calcChecker2(cpfWithChecker1) {\n        var sum = null;\n\n        for (var k = 0; k < 10; ++k) {\n            sum += cpfWithChecker1.toString().charAt(k) * (11 - k);\n        }\n\n        var lastSumChecker2 = sum % 11;\n        var checker2 = lastSumChecker2 < 2 ? 0 : 11 - lastSumChecker2;\n\n        return checker2;\n    }\n\n    function formatCPF(value, formatter) {\n        var digitsSeparator = '.',\n            checkersSeparator = '-';\n\n        if (formatter === 'digits') {\n            digitsSeparator = '';\n            checkersSeparator = '';\n        } else if (formatter === 'checker') {\n            digitsSeparator = '';\n            checkersSeparator = '-';\n        }\n\n        if (value.length > 11) {\n            return 'The value contains error. Has more than 11 digits.';\n        } else if (value.length < 11) {\n            return 'The value contains error. Has fewer than 11 digits.';\n        } else {\n            return value.slice(0, 3) + digitsSeparator + value.slice(3, 6) + digitsSeparator + value.slice(6, 9) + checkersSeparator + value.slice(9, 11);\n        }\n    }\n\n    CPF.generate = function (param) {\n        var firstNineDigits = '';\n\n        // Generating the first 9 digits of the CPF\n        for (var i = 0; i < 9; ++i) {\n            firstNineDigits += Math.floor(Math.random() * 9) + '';\n        }\n\n        var checker1 = calcChecker1(firstNineDigits);\n        var generatedCPF = firstNineDigits + checker1 + calcChecker2(firstNineDigits + checker1);\n\n        return formatCPF(generatedCPF, param);\n    };\n\n    CPF.validate = function (value) {\n        var cleanCPF = value.replace(/\\.|\\-|\\s/g, ''),\n            firstNineDigits = cleanCPF.substring(0, 9),\n            checker = cleanCPF.substring(9, 11);\n\n        if (cleanCPF.length !== 11) {\n            return false;\n        }\n\n        // Checking if all digits are equal\n        for (var i = 0; i < 10; i++) {\n            if ('' + firstNineDigits + checker === Array(12).join(i)) {\n                return false;\n            }\n        }\n\n        var checker1 = calcChecker1(firstNineDigits);\n        var checker2 = calcChecker2(firstNineDigits + '' + checker1);\n\n        if (checker.toString() === checker1.toString() + checker2.toString()) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    CPF.format = function (value, param) {\n        var getCPF = value.replace(/[^\\d]/g, '');\n\n        return formatCPF(getCPF, param);\n    };\n\n    return CPF;\n})();"]}